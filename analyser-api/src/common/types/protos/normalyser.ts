// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.8
// source: normalyser.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "normalyser";

export interface Transaction {
  date: string;
  description: string;
  amount: string;
}

export interface TransactionsRequest {
  transactions: Transaction[];
}

export interface NormalisedMerchant {
  name: string;
  originalName: string;
  category: string;
  subCategory: string;
  confidence: number;
  isSubscription: boolean;
  flags: string[];
}

export interface NormalisedMerchantsResponse {
  normalisedMerchants: NormalisedMerchant[];
}

export interface NormalisedPattern {
  type: string;
  merchant: string;
  amount: number;
  frequency: string;
  confidence: number;
  nextExpected: string;
  notes: string;
}

export interface NormalisedPatternsResponse {
  normalisedPatterns: NormalisedPattern[];
}

export const NORMALYSER_PACKAGE_NAME = "normalyser";

export interface NormalyserServiceClient {
  normalizeMerchant(request: TransactionsRequest): Observable<NormalisedMerchantsResponse>;

  normalizePattern(request: TransactionsRequest): Observable<NormalisedPatternsResponse>;
}

export interface NormalyserServiceController {
  normalizeMerchant(
    request: TransactionsRequest,
  ): Promise<NormalisedMerchantsResponse> | Observable<NormalisedMerchantsResponse> | NormalisedMerchantsResponse;

  normalizePattern(
    request: TransactionsRequest,
  ): Promise<NormalisedPatternsResponse> | Observable<NormalisedPatternsResponse> | NormalisedPatternsResponse;
}

export function NormalyserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["normalizeMerchant", "normalizePattern"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NormalyserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NormalyserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NORMALYSER_SERVICE_NAME = "NormalyserService";
